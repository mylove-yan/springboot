<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<!--根节点configuration有两个子节点：appenders和loggers,可以定义很多个appender和logger.只有定义了logger并引入的appender,appender才会生效-->
<!--Logger：日志记录器，负责收集处理日志记录（如何处理日志）-->
<!--Appender：日志输出目的地，负责日志的输出（输出到什么地方）-->
<!--Layout：日志格式化，负责对输出的日志格式化（以什么形式展现）-->
<!--Log4J中有一个特殊的logger叫做"root"，他是所有logger的根，也就意味着其他所有的logger都会直接或者间接地继承自root.在其他logger中可以通过设置属性additivity为false避免日志被父logger重复处理-->
<Configuration status="OFF" monitorInterval="30">
    <Properties>
        <Property name="APP_NAME">sbdemo</Property>
        <Property name="LOG_HOME">f:/applogs/${APP_NAME}</Property>
        <Property name="LOG_LEVEL">INFO</Property>
    </Properties>

    <Appenders>
        <Console name="CONSOLE-APPENDER" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout
                    pattern="%highlight{%d{yyyy.MM.dd 'at' HH:mm:ss z} %-5level %class{36} %M() @%L - %msg%n}{FATAL=Bright Red, ERROR=Bright Magenta, WARN=Bright Yellow, INFO=Bright Green, DEBUG=Bright Cyan, TRACE=Bright White}"/>
        </Console>

        <!--这种文件不会归档，append为false则文件不会追加写，即程序每次重启会清空原文件-->
        <File name="ERROR" fileName="${LOG_HOME}/error.log" append="false">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="%d{yyyy.MM.dd 'at' HH:mm:ss z} %-5level %class{36} %M() @%L - %msg%n"/>
        </File>

        <!--这个不设置级别会打印出所有的日志，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingInfoFile" fileName="${LOG_HOME}/app.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/app-%d{MM-dd-yyyy}-%i.log.gz">
            <PatternLayout pattern="%d{yyyy.MM.dd 'at' HH:mm:ss z} %-5level %class{36} %M() @%L - %msg%n"/>
            <SizeBasedTriggeringPolicy size="1MB"/>
        </RollingFile>

        <!-- 只接受error级别的日志,并归档 -->
        <RollingFile name="RollingErrorFile" fileName="${LOG_HOME}/rerror.log" filePattern="${LOG_HOME}/error/$${date:yyyy-MM-dd}/error-%d{MM-dd-yyyy}-%i.log.gz">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="%d{yyyy.MM.dd 'at' HH:mm:ss z} %-5level %class{36} %M() @%L - %msg%n"/>
            <SizeBasedTriggeringPolicy size="1MB"/>
        </RollingFile>

        <!-- 自定义一个SERVICE类型的日志,其实和上面的RollingInfoFile类似-->
        <RollingFile name="SERVICE-APPENDER" fileName="${LOG_HOME}/service.log"
                     filePattern="${LOG_HOME}/service/$${date:yyyy-MM-dd}/error-%d{MM-dd-yyyy}-%i.log.gz">
            <PatternLayout pattern="%d{yyyy.MM.dd 'at' HH:mm:ss z} %-5level %class{36} %M() @%L - %msg%n"/>
            <SizeBasedTriggeringPolicy size="1MB"/>
        </RollingFile>
    </Appenders>

    <Loggers>
        <!--com.bigbird.springbootdemo.service包下打日志都进这里,其它的进root;
        additivity为false表示不在父logger里处理,否则com.bigbird.springbootdemo.service包下的日志也会进入root处理-->
        <Logger name="com.bigbird.springbootdemo.service" level="${LOG_LEVEL}" additivity="false">
            <AppenderRef ref="CONSOLE-APPENDER"/>
            <AppenderRef ref="SERVICE-APPENDER"/>
        </Logger>

        <!--root默认是所有logger的根，level控制日志输出级别-->
        <Root level="ALL">
            <appender-ref ref="ERROR" />
            <appender-ref ref="RollingInfoFile"/>
            <appender-ref ref="RollingErrorFile"/>
            <appender-ref ref="CONSOLE-APPENDER"/>
        </Root>
    </Loggers>
</Configuration>
